;;;---------------------------------------------------------------------------------------------------
;;; Module: base.rkt
;;;---------------------------------------------------------------------------------------------------

#lang racket/base

(provide divisor? multiple? multiple-of-any?)
(provide digits)


;;;---------------------------------------------------------------------------------------------------
;;; divisor?; multiple?; multiple-of-any?
;;;---------------------------------------------------------------------------------------------------

(define (divisor? d n) (zero? (remainder n d)))
(define (multiple? m n) (divisor? n m))
(define (multiple-of-any? m ns) (for/or ((n ns)) (multiple? m n)))


;;;---------------------------------------------------------------------------------------------------
;;; digits
;;;---------------------------------------------------------------------------------------------------

(define (digits n #:base (b 10))
  (let loop ((n n) (ds '()))
    (let-values (((q r) (quotient/remainder n b)))
      (if (zero? q)
          (cons r ds)
          (loop q (cons r ds))))))
