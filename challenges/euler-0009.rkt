;;;---------------------------------------------------------------------------------------------------
;;; Project Euler <>: <>
;;;---------------------------------------------------------------------------------------------------

#lang racket/base

(provide test solve)


;;;---------------------------------------------------------------------------------------------------
;;; Solution
;;;---------------------------------------------------------------------------------------------------

(define (euler n)
  (let ([bound-a (quotient n 3)])
    (let loop ([a 1])
      (let ([b (/ (* n (- n (* 2 a))) (* 2 (- n a)))])
        (cond [(integer? b) (* a b (- n a b))]
              [(< a bound-a) (loop (add1 a))]
              [else 'nothing])))))


;;;---------------------------------------------------------------------------------------------------
;;; Runme interface
;;;---------------------------------------------------------------------------------------------------

(define (test) (= 60 (euler 12)))
(define (solve) (euler 1000))